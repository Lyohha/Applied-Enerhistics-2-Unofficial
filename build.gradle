/*
 * This file is part of Applied Energistics 2.
 * Copyright (c) 2013 - 2014, AlgorithmX2, All rights reserved.
 *
 * Applied Energistics 2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Applied Energistics 2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Applied Energistics 2.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */


buildscript {
    repositories {
        mavenCentral()
        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
		maven {
            name 'Scala CI dependencies'
            url 'https://repo1.maven.org/maven2/'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name 'jitpack'
            url 'https://jitpack.io'
        }
        maven { // GalacticGreg, YAMCore,..
            name 'UsrvDE'
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.13'
    }
}

repositories {

    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }
	
	maven {
        name 'GTNH Maven'
        url 'http://jenkins.usrv.eu:8081/nexus/content/groups/public/'
         allowInsecureProtocol
    }
    maven {
        name 'ic2'
        url 'https://maven.ic2.player.to/'
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        name 'MM repo'
        url 'https://maven.k-4u.nl/'
    }
    maven {
        name 'OpenComputers Repo'
        url 'https://maven.cil.li/'
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url 'https://jitpack.io'
    }

}

configurations {
    mods
}


apply plugin: 'forge'
apply plugin: 'idea'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = aeversion + "-" + aechannel + "-" + aebuild
group = aegroup
archivesBaseName = aebasename



dependencies {

	
	compile('com.github.GTNewHorizons:CodeChickenLib:1.1.5.5:dev')
    compile('com.github.GTNewHorizons:NotEnoughItems:2.2.33-GTNH:dev')
    compile('curse.maven:cofh-core-69162:2388751')

    compile('com.github.GTNewHorizons:BuildCraft:7.1.27:dev') {transitive = false}
    compileOnly('com.github.GTNewHorizons:ForgeMultipart:1.2.8:dev') {transitive = false}
    compileOnly('com.github.GTNewHorizons:GT5-Unofficial:5.09.41.18:dev') {transitive = false}
    compileOnly('com.github.GTNewHorizons:Jabba:1.2.21:dev') {transitive = false}
    compileOnly('com.github.GTNewHorizons:inventory-tweaks:1.5.15:api') {transitive = false}
    compileOnly('com.github.GTNewHorizons:OpenComputers:1.7.5.32-GTNH:api') {transitive = false}
    compileOnly('com.github.GTNewHorizons:waila:1.5.21:api') {transitive = false}
    compileOnly('com.github.GTNewHorizons:Railcraft:9.13.10:api') {transitive = false}

    compileOnly('net.industrial-craft:industrialcraft-2:2.2.828-experimental:api')
    compileOnly('curse.maven:minefactory-reloaded-66672:2366150')
    compileOnly('pneumaticCraft:PneumaticCraft-1.7.10:1.12.7-152:api') {transitive = false}
    compileOnly('curse.maven:better-storage-232919:2731636')
    compileOnly('api:immibis:1')

    testCompile('junit:junit:4.12')
}


// If TeamCity is running this build, lets set the version info
if (hasProperty("teamcity")) {
    version = teamcity["build.number"]

    // Fix for main branch being built
    version = version.replaceAll("/", "-")
}

// Add Coremod Manifest
jar {
    manifest {
        attributes 'FMLCorePlugin': 'appeng.transformer.AppEngCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }

    // specify which files are really included, can control which APIs should be in
    include "appeng/**"
    include "assets/**"
    include "mcmod.info"
    include "pack.mcmeta"
}

minecraft {
    version = minecraft_version + "-" + forge_version

    replaceIn "AEConfig.java"
    replaceIn "package-info.java"

    replace "@version@", project.version
    replace "@aeversion@", aeversion
    replace "@aechannel@", aechannel
    replace "@aebuild@", aebuild

    // used when launching minecraft in dev env
    runDir = "run"
}

sourceSets {
    main {
        java {
            srcDirs += 'src/api/java'
            srcDirs += 'src/main/java/'
        }

        resources {
            srcDir "src/main/resources/"
            include "assets/appliedenergistics2/recipes/**/*.recipe",
                    "assets/appliedenergistics2/recipes/README.html",
                    "assets/appliedenergistics2/lang/*.lang",
                    "assets/appliedenergistics2/textures/blocks/*",
                    "assets/appliedenergistics2/textures/guis/*",
                    "assets/appliedenergistics2/textures/models/*",
                    "assets/appliedenergistics2/textures/items/*",
                    "assets/appliedenergistics2/meta/*",
                    "mcmod.info",
                    "pack.mcmeta"
        }
    }
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': minecraft_version
    }
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.api.java
    include "appeng/api/**"

    classpath = configurations.compile
}

task javadocJar(type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from 'build/docs/javadoc/'
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task devJar(type: Jar) {

    manifest {
        attributes 'FMLCorePlugin': 'appeng.transformer.AppEngCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }

    from(sourceSets.main.output) {
        include "appeng/**"
        include "assets/**"
        include 'mcmod.info'
    }

    classifier = 'dev'
}

task apiJar(type: Jar) {
    from sourceSets.api.java
    include "appeng/api/**"

    from sourceSets.main.output
    include "appeng/api/**"

    classifier = 'api'
}

artifacts {
    archives devJar
    archives apiJar
    archives javadocJar
    archives sourceJar
}